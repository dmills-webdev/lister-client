{"version":3,"sources":["assets/add.svg","assets/hamburger.svg","Signup.js","Login.js","components/TodoItem.js","components/TodoList.js","components/NewTodoForm.js","Todos.js","components/Navbar.js","App.js","index.js"],"names":["module","exports","Signup","history","useHistory","useState","submitText","modifySubmitText","validateForm","e","password","target","value","passwordConfirmation","length","errorBoxMessage","push","a","preventDefault","persist","isSubmissionValid","form","data","FormData","fetch","method","body","then","res","json","submitAccepted","displayFormErrorMessage","displayErrorBox","removeErrorBox","document","getElementById","classList","add","validationErrors","errorBox","map","item","errorItem","createElement","textContent","appendChild","remove","clearErrorDisplay","moveLabel","label","name","toggle","className","onSubmit","autoComplete","id","htmlFor","type","onFocus","onBlur","onChange","hidden","Login","setUser","credentials","window","localStorage","setItem","token","toString","username","classes","classNames","TodoItem","task","completed","toggleCompleted","removeTodo","checked","onClick","TodoList","todos","todo","key","NewTodoForm","submitNewTodo","updateTask","handleSubmit","placeholder","src","alt","Todos","user","defaultTodos","modifyTodos","useEffect","getItem","headers","Array","isArray","catch","error","console","log","JSON","stringify","updatedTodos","filter","newTask","newTodo","Date","getTime","oldTodos","toggleMenu","NavbarLoggedIn","removeItem","NavbarLoggedOut","to","exact","activeClassName","App","getUsername","hamburger","path","component","render","props","isAuthed","ReactDOM"],"mappings":"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","file":"static/js/main.1370bb31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.34280c59.svg\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.78aa51f7.svg\";","import React, { useState } from 'react'\nimport { useHistory } from \"react-router-dom\"\n\nimport './scss/Signup.scss'\n\nfunction Signup() {\n  const { REACT_APP_API } = process.env\n  const history = useHistory()\n\n// String content of the submit button which varies if there are errors in the inputs that need to be fixed before the form can be submitted\n  const [ submitText, modifySubmitText ] = useState('Submit')\n\n// Locally validate signup details\n  function validateForm(e) {\n    const password = e.target.password.value\n    const passwordConfirmation = e.target.passwordConfirmation.value\n    if ((password === passwordConfirmation) && // Passwords match\n        (password.length >= 8)) // Password minimum length is 8 characters\n    {\n      return true // Form is valid\n    }\n    else {\n      // Push all relevant validation errors into an array and return it\n      var errorBoxMessage =[]\n      if (password !== passwordConfirmation) {\n        errorBoxMessage.push(`Passwords don't match!`)\n      }\n      if (password.length <= 8) {\n        errorBoxMessage.push(`Minimum password length 8 characters!`)\n      }\n      return errorBoxMessage\n    }\n  }\n\n// Handle form submission\n  async function handleSubmit(e) {\n    e.preventDefault()\n    e.persist() // Persist form event for clientside validation and then to be sent to server\n\n    const isSubmissionValid = validateForm(e)\n\n    if ( isSubmissionValid === true )  {\n      const form = e.target\n      const data = new FormData(form)\n      await fetch('https://lister-server.herokuapp.com/signup', {\n       method: 'POST',\n       body: data\n      })\n      .then( res => res.json() )\n      .then( submitAccepted => {\n        if (submitAccepted) {\n          // Username was accepted and account was created\n          history.push('/login')\n        } else {\n          // Form rejected serverside for username already being in use, display error\n          displayFormErrorMessage()\n          displayErrorBox(['Username already in use, try something else!'])\n        }\n      })\n    }\n    else {\n      // Form rejected clientside for password validtion issues, display error\n      displayFormErrorMessage()\n      removeErrorBox()\n      displayErrorBox(isSubmissionValid)\n    }\n  }\n\n\n// Form error visualisation\n  // Modify submit button to display that there is an error in the form\n  function displayFormErrorMessage() {\n    modifySubmitText('Error in form!')\n    document.getElementById('submit-proxy').classList.add('error-styling')\n  }\n  // Revert submit button back to normal\n  function removeFormErrorMessage() {\n    modifySubmitText('Submit')\n    document.getElementById('submit-proxy').classList.remove('error-styling')\n  }\n  // Display error box in form\n  function displayErrorBox( validationErrors ) {\n    document.getElementById('form-container').classList.add('shrink-width')\n\n    const errorBox = document.getElementById('error-box')\n    validationErrors.map(item => {\n      let errorItem = document.createElement('div')\n      errorItem.textContent = item\n      errorBox.appendChild(errorItem)\n    })\n    errorBox.classList.add('visible')\n  }\n  // Remove error box in form\n  function removeErrorBox() {\n    document.getElementById('form-container').classList.remove('shrink-width')\n\n    const errorBox = document.getElementById('error-box')\n    errorBox.classList.remove('visible')\n    errorBox.textContent = ''\n  }\n  // Clear error messages when any of the form input values change\n  function clearErrorDisplay() {\n    removeErrorBox()\n    removeFormErrorMessage()\n  }\n\n\n// Moves and shrinks form input label when the input gains focus\n  function moveLabel(e) {\n    const label = document.getElementById(e.target.name)\n    if (e.target.value === '') {\n      label.classList.toggle('focussedLabel')\n    }\n  }\n\n  return(\n    <div className='signup-container'>\n\n    <div className='welcome-banner'>\n      <h1>\n        New to Lister?\n      </h1>\n      <h2>\n        Signup to Lister for free and keep your lists synced, on all your devices, all the time.\n      </h2>\n    </div>\n\n    <div className='form-area'>\n      <form onSubmit={handleSubmit} name='signup' className='signup-form' autoComplete='off'>\n        <div id='form-container'>\n          <div className='input-container'>\n            <label htmlFor='username' id='username'>\n              Username\n            </label>\n            <input\n              type='text'\n              name='username'\n              onFocus={moveLabel}\n              onBlur={moveLabel}\n              onChange={clearErrorDisplay}/>\n          </div>\n\n          <div className='input-container'>\n            <label htmlFor='password' id='password'>\n              Password\n            </label>\n            <input\n              type='password'\n              name='password'\n              onFocus={moveLabel}\n              onBlur={moveLabel}\n              onChange={clearErrorDisplay}/>\n          </div>\n\n          <div className='input-container'>\n            <label htmlFor='passwordConfirmation' id='passwordConfirmation'>\n              Confirm password\n            </label>\n            <input\n              type='password'\n              name='passwordConfirmation'\n              onFocus={moveLabel}\n              onBlur={moveLabel}\n              onChange={clearErrorDisplay}/>\n          </div>\n          <div id='error-box'>Error</div>\n\n          <button name='submit-button' id='submit-button' hidden></button>\n        </div>\n      </form>\n\n      <label id='submit-proxy' htmlFor='submit-button' className='submit-proxy-button'>\n        {submitText}\n      </label>\n    </div>\n  </div>\n  )\n}\n\nexport default Signup\n","import React , { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport './scss/Login.scss'\n\nfunction Login({ setUser }) {\n  const { REACT_APP_API } = process.env\n  const history = useHistory()\n\n  const [ submitText, modifySubmitText ] = useState('Login')\n\n// Handle form submission\n  function handleSubmit(e) {\n    e.preventDefault()\n    const form = e.target\n    const data = new FormData(form)\n    fetch('https://lister-server.herokuapp.com/login', {\n     method: 'POST',\n     body: data,\n     credentials: 'include'\n    })\n    .then( res => res.json() )\n    .then( data => {\n      if (data === false ) {\n        displayFormErrorMessage()\n        displayErrorBox()\n      }\n      else {\n        window.localStorage.setItem('listerToken', data.token.toString() )\n        setUser(data.username)\n        history.push('/')\n      }\n    })\n  }\n\n// Form error visualisation\n  // Modify login button to display that there is a problem with the login\n  function displayFormErrorMessage() {\n    modifySubmitText('Problem logging in!')\n    document.getElementById('submit-proxy').classList.add('error-styling')\n  }\n  // Revert login button back to normal\n  function removeFormErrorMessage() {\n    modifySubmitText('Login')\n    document.getElementById('submit-proxy').classList.remove('error-styling')\n  }\n  // Display error box in form\n  function displayErrorBox() {\n    document.getElementById('form-container').classList.add('shrink-width')\n    const errorBox = document.getElementById('error-box')\n    let errorItem = document.createElement('div')\n    errorItem.textContent = 'Problem with username or password, try retyping and logging in again.'\n    errorBox.appendChild(errorItem)\n    errorBox.classList.add('visible')\n  }\n  // Remove error box in form\n  function removeErrorBox() {\n    document.getElementById('form-container').classList.remove('shrink-width')\n    const errorBox = document.getElementById('error-box')\n    errorBox.classList.remove('visible')\n    errorBox.textContent = ''\n  }\n  // Clear error messages when any of the form input values change\n  function clearErrorDisplay() {\n    removeErrorBox()\n    removeFormErrorMessage()\n  }\n\n\n// Moves fake placeholder text on inputs move and stay at the new position as long as the input isn't empty\n  function moveLabel(e) {\n    const label = document.getElementById(e.target.name)\n    if (e.target.value === '') {\n      label.classList.toggle('focussedLabel')\n    }\n  }\n\n\n\n  return(\n    <div className='login-container'>\n\n      <div className='welcome-banner'>\n        <h1>\n          Welcome back!\n        </h1>\n        <h2>\n          Login and keep your lists synced across all your devices.\n        </h2>\n      </div>\n\n      <div className='form-area'>\n        <form onSubmit={handleSubmit} name='login' className='login-form'>\n          <div id='form-container'>\n            <div className='input-container'>\n              <label htmlFor='username' id='username'>\n                Username\n              </label>\n              <input\n                type='text'\n                name='username'\n                onFocus={moveLabel}\n                onBlur={moveLabel}\n                onChange={clearErrorDisplay}/>\n            </div>\n\n            <div className='input-container'>\n              <label htmlFor='password' id='password'>\n                Password\n              </label>\n              <input\n                type='password'\n                name='password'\n                onFocus={moveLabel}\n                onBlur={moveLabel}\n                onChange={clearErrorDisplay}/>\n            </div>\n            <div id='error-box'>Error</div>\n\n            <button name='submit-button' id='submit-button' hidden></button>\n          </div>\n        </form>\n\n        <label id='submit-proxy' htmlFor='submit-button' className='submit-proxy-button'>\n          {submitText}\n        </label>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","import React from \"react\"\nimport classNames from \"classnames\"\n\nconst classes = classNames({ // Apply multiple classes to the element\n      \"remove-todo\": true,\n      \"float-right\": true\n    })\n\nconst TodoItem = ({ id, task, completed, toggleCompleted, removeTodo }) => (\n  <div className=\"todo-item\">\n    <input\n      type=\"checkbox\"\n      value={completed}\n      checked={completed}\n      onChange={() => toggleCompleted(id)}/>\n\n    <span className={completed ? \"completed-todo\" : null}> {/*Toggle styling if todo is completed*/}\n      {task}\n    </span>\n\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={() => removeTodo(id)}>\n      Remove\n    </button>\n\n  </div>\n)\n\nexport default TodoItem\n","import React from \"react\"\nimport TodoItem from \"./TodoItem\"\n\nconst TodoList = ({ todos, toggleCompleted, removeTodo }) => {\n  return(\n    <div className=\"todo-container\">\n      {\n        todos.map(todo => {\n          return(\n            <TodoItem\n              key={todo.id}\n              toggleCompleted={toggleCompleted}\n              removeTodo={removeTodo}\n              id={todo.id}\n              task={todo.task}\n              completed={todo.completed}/>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default TodoList\n","import React, { useState } from 'react'\n\nimport add from '../assets/add.svg'\n\nconst NewTodoForm = ({ submitNewTodo }) => {\n  let [ task, updateTask ] = useState('')\n\n  const handleInputChange = (e) => {\n    updateTask(\n      e.target.value\n    )\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()    // Prevent form submission\n    submitNewTodo(task)   // Submit todo\n    updateTask('')        // Clear textbox\n  }\n\n  return(\n    <div className='new-todo-form'>\n      <form onSubmit={(e) => handleSubmit(e)} autoComplete='off'>\n        <label>\n          <input\n            name='task'\n            value={task}\n            placeholder='E.g. Water the plants'\n            onChange={handleInputChange}\n            type='text'>\n          </input>\n        </label>\n\n        <button type='submit'>\n          <img src={add} alt='plus symbol icon'/>\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewTodoForm\n","import React, { useState, useEffect } from 'react'\n\nimport TodoList from './components/TodoList'\nimport NewTodoForm from './components/NewTodoForm'\n\nimport './scss/Todos.scss'\n\nfunction Todos({ user }) {\n  const { REACT_APP_API } = process.env\n// Default single todo to display to unregsitered or brand new users\n  const defaultTodos = [{\n    id: 0,\n    task: 'Write first todo (or list item!)',\n    completed: false\n  }]\n  const [ todos, modifyTodos ] = useState(defaultTodos)\n\n\n// Load user's todos\n  useEffect(() => {\n    // If a login token is set then try and use it to GET the users stored todos\n    if ( localStorage.getItem('listerToken') ) {\n      fetch('https://lister-server.herokuapp.com/todos', {\n        method: 'GET',\n        headers: {\n         'Authorization' : `Bearer ${localStorage.getItem('listerToken')}`\n        }\n      })\n      .then( res => res.json() )\n      .then( todos => {\n        if ( Array.isArray(todos) && ( (todos[0]&&todos[0].id!==0) || todos[1]) )  { // Use database todos unless problem with array\n          modifyTodos(todos)\n        }\n      })\n      .catch( error  => {\n        console.log(error)\n      })\n    }\n    // If user does not seem to be logged in locally then default back to the defaultTodos\n    else {\n      modifyTodos(defaultTodos)\n    }\n  }, [user])\n\n\n// Update users todo storage when modified\n  useEffect(() => {\n    // If a login token is set then try and use it to PUT the updated todos to the database\n    if ( localStorage.getItem('listerToken') ) {\n      fetch('https://lister-server.herokuapp.com/todos', {\n        method: 'PUT',\n        body: JSON.stringify({todos}),\n        headers: {\n          'Authorization' : `Bearer ${localStorage.getItem('listerToken')}`,\n          'Content-Type': 'application/json'\n        }\n      })\n      .catch( error => {\n        console.log(error)\n      })\n    }\n  }, [todos])\n\n\n// Add new todo to list\n  const submitNewTodo = (newTask) => {\n    let d = new Date()\n    let timeBasedID = d.getTime() // Generates a unique-to-user ID based on the time the todo is submitted\n    let newTodo = {\n      id: timeBasedID,\n      task: newTask,\n      completed: false\n    }\n    modifyTodos(oldTodos => [...oldTodos, newTodo]) // Add todo onto end of existing todo array\n  }\n\n\n// Delete todo\n  const removeTodo = (id) => {\n    modifyTodos(\n      todos.filter(todo => todo.id !== id) // FIlter out the id in question and make that the new existing todo array\n    )\n  }\n\n\n// Toggle a todo's completion status\n  const toggleCompleted = (id) => {\n    let updatedTodos = todos.map(todo => { // Linear search for the right todo item in existing todo array\n      if (todo.id === id) {\n        todo.completed = !todo.completed // Boolean flip of todo property on todo that matches the todo id that was clicked\n      }\n      return todo\n    })\n    modifyTodos(\n      updatedTodos\n    )\n  }\n///////////////////////////////////////////////////////////////// Presentational\n  return(\n    <div>\n      <TodoList\n        todos={todos}\n        toggleCompleted={toggleCompleted}\n        removeTodo={removeTodo}/>\n      <NewTodoForm\n        submitNewTodo={submitNewTodo}/>\n    </div>\n  )\n}\n\nexport default Todos\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport '../scss/Navbar.scss'\n\nfunction toggleMenu(e) {\n  const menu = document.getElementById('main-nav')\n  menu.classList.toggle('nav-popout')\n}\n\nfunction NavbarLoggedIn({ user, setUser }) {\n  const { REACT_APP_API } = process.env\n  // Log current user out\n  function logout() {\n    fetch('https://lister-server.herokuapp.com/logout', {\n      credentials: 'include'\n    })\n    .then( setUser(null) )\n    .then( window.localStorage.removeItem('listerToken') )\n  }\n  return (\n    <nav id='main-nav'>\n      <div className='nav-user'>\n        {user}\n      </div>\n      <div className='nav-button' onClick={logout}>\n        Logout\n      </div>\n    </nav>\n  )\n}\n\nfunction NavbarLoggedOut() {\n\n  return (\n    <nav id='main-nav'>\n      <NavLink\n        to='/login' exact\n        activeClassName='activeLink'\n        className='nav-button'\n        onClick={toggleMenu}>\n          Login\n      </NavLink>\n\n      <NavLink\n        to='/signup' exact\n        activeClassName='activeLink'\n        className='nav-button'\n        onClick={toggleMenu}>\n          Signup\n      </NavLink>\n\n      <NavLink\n        to='/' exact\n        activeClassName='activeLink'\n        className='nav-button'\n        onClick={toggleMenu}>\n          Todos\n      </NavLink>\n    </nav>\n  )\n}\n\nexport { NavbarLoggedIn, NavbarLoggedOut }\n","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter, NavLink, Route } from 'react-router-dom'\n\nimport Signup from './Signup'\nimport Login from './Login'\nimport Todos from './Todos'\nimport { NavbarLoggedIn, NavbarLoggedOut } from './components/Navbar'\n\nimport \"./scss/App.scss\"\nimport hamburger from './assets/hamburger.svg'\n\nfunction App() {\n  // App's local record if a user appears logged in or not, passed to Navbar\n  const [ user, setUser ] = useState(null)\n\n  // Check if a user token is in localStorage, if so then try and use it to login\n  // If token login fails then\n  useEffect(() => {\n    if ( (user === null) && localStorage.getItem('listerToken') ) {\n      fetch('https://lister-server.herokuapp.com/token-login', {\n       method: 'POST',\n       headers: {\n        'Authorization' : `Bearer ${localStorage.getItem('listerToken')}`\n       }\n      })\n      .then( res => res.json() )\n      .then( username => {\n        setUser(username)\n      })\n      .catch( console.log('Error logging in with JWT') )\n    }\n  }, [])\n\n  // Toggles dropdown menu visibility change on mobile site\n  function toggleMenu(e) {\n    const menu = document.getElementById('main-nav')\n    menu.classList.toggle('nav-popout')\n  }\n\n  // Gets the username of the user to display in the header bar\n  function getUsername() {\n    if (user !== null) {\n      return user.username\n    }\n  }\n\n  return(\n    <BrowserRouter>\n        <header className='main-header'>\n\n          <div className='mobile-username'>\n            {getUsername()}\n          </div>\n\n          <NavLink\n            to='/' exact\n            activeClassName='activeLink'\n            className='logo'>\n              Lister\n          </NavLink>\n\n          <div\n            className='hamburger-icon'\n            onClick={toggleMenu}>\n            <img src={hamburger} alt='Hamburger menu icon for navigation menu'/>\n          </div>\n\n          {/*Change navbar options depending on if the user is logged in or not*/}\n          { user ?\n            <NavbarLoggedIn user={user} setUser={setUser}/>\n            :\n            <NavbarLoggedOut/>\n          }\n        </header>\n\n        <main>\n          <Route\n            exact path='/signup'\n            component={Signup} />\n\n          <Route\n            exact path='/login'\n            render={(props) => (\n              <Login {...props} isAuthed={true}\n                setUser={setUser}/>\n            )} />\n\n          <Route\n            exact path='/'\n            render={(props) => (\n              <Todos {...props} isAuthed={true}\n                user={user}/>\n            )} />\n        </main>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}