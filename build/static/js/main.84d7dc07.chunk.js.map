{"version":3,"sources":["assets/add.svg","assets/hamburger.svg","Signup.js","Login.js","components/TodoItem.js","components/TodoList.js","components/NewTodoForm.js","Todos.js","components/Navbar.js","App.js","index.js"],"names":["module","exports","Signup","history","useHistory","submitText","modifySubmitText","useState","displayFormErrorMessage","document","getElementById","classList","add","displayErrorBox","validationErrors","errorBox","forEach","item","errorItem","createElement","textContent","appendChild","removeErrorBox","remove","clearErrorDisplay","moveLabel","e","label","target","name","value","toggle","React","className","onSubmit","async","preventDefault","persist","isSubmissionValid","password","passwordConfirmation","length","errorBoxMessage","push","validateForm","form","data","FormData","fetch","process","method","body","then","res","json","submitAccepted","autoComplete","id","htmlFor","type","onFocus","onBlur","onChange","hidden","Login","_ref","setUser","credentials","window","localStorage","setItem","token","toString","username","classes","classNames","TodoItem","task","completed","toggleCompleted","removeTodo","checked","onClick","TodoList","todos","map","todo","key","NewTodoForm","submitNewTodo","updateTask","handleSubmit","placeholder","src","alt","defaultTodos","Todos","user","modifyTodos","useEffect","getItem","headers","concat","Array","isArray","catch","error","console","log","JSON","stringify","updatedTodos","filter","newTask","newTodo","Date","getTime","oldTodos","toggleMenu","NavbarLoggedIn","removeItem","NavbarLoggedOut","NavLink","to","exact","activeClassName","App","BrowserRouter","getUsername","hamburger","Route","path","component","render","props","Object","assign","isAuthed","ReactDOM"],"mappings":"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","file":"static/js/main.84d7dc07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.34280c59.svg\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.78aa51f7.svg\";","import React, { useState } from 'react'\nimport { useHistory } from \"react-router-dom\"\n\nimport './scss/Signup.scss'\n\nfunction Signup() {\n  const history = useHistory()\n\n// String content of the submit button which varies if there are errors in the inputs that need to be fixed before the form can be submitted\n  const [ submitText, modifySubmitText ] = useState('Submit')\n\n// Locally validate signup details\n  function validateForm(e) {\n    const password = e.target.password.value\n    const passwordConfirmation = e.target.passwordConfirmation.value\n    if ((password === passwordConfirmation) && // Passwords match\n        (password.length >= 8)) // Password minimum length is 8 characters\n    {\n      return true // Form is valid\n    }\n    else {\n      // Push all relevant validation errors into an array and return it\n      var errorBoxMessage =[]\n      if (password !== passwordConfirmation) {\n        errorBoxMessage.push(`Passwords don't match!`)\n      }\n      if (password.length <= 8) {\n        errorBoxMessage.push(`Minimum password length 8 characters!`)\n      }\n      return errorBoxMessage\n    }\n  }\n\n// Handle form submission\n  async function handleSubmit(e) {\n    e.preventDefault()\n    e.persist() // Persist form event for clientside validation and then to be sent to server\n\n    const isSubmissionValid = validateForm(e)\n\n    if ( isSubmissionValid === true )  {\n      const form = e.target\n      const data = new FormData(form)\n      await fetch( process.env.REACT_APP_BACKEND_URL +  'signup', {\n       method: 'POST',\n       body: data\n      })\n      .then( res => res.json() )\n      .then( submitAccepted => {\n        if (submitAccepted) {\n          // Username was accepted and account was created\n          history.push('/login')\n        } else {\n          // Form rejected serverside for username already being in use, display error\n          displayFormErrorMessage()\n          displayErrorBox(['Username already in use, try something else!'])\n        }\n      })\n    }\n    else {\n      // Form rejected clientside for password validtion issues, display error\n      displayFormErrorMessage()\n      removeErrorBox()\n      displayErrorBox(isSubmissionValid)\n    }\n  }\n\n\n// Form error visualisation\n  // Modify submit button to display that there is an error in the form\n  function displayFormErrorMessage() {\n    modifySubmitText('Error in form!')\n    document.getElementById('submit-proxy').classList.add('error-styling')\n  }\n  // Revert submit button back to normal\n  function removeFormErrorMessage() {\n    modifySubmitText('Submit')\n    document.getElementById('submit-proxy').classList.remove('error-styling')\n  }\n  // Display error box in form\n  function displayErrorBox( validationErrors ) {\n    document.getElementById('form-container').classList.add('shrink-width')\n\n    const errorBox = document.getElementById('error-box')\n    validationErrors.forEach(item => {\n      let errorItem = document.createElement('div')\n      errorItem.textContent = item\n      errorBox.appendChild(errorItem)\n    })\n    errorBox.classList.add('visible')\n  }\n  // Remove error box in form\n  function removeErrorBox() {\n    document.getElementById('form-container').classList.remove('shrink-width')\n\n    const errorBox = document.getElementById('error-box')\n    errorBox.classList.remove('visible')\n    errorBox.textContent = ''\n  }\n  // Clear error messages when any of the form input values change\n  function clearErrorDisplay() {\n    removeErrorBox()\n    removeFormErrorMessage()\n  }\n\n\n// Moves and shrinks form input label when the input gains focus\n  function moveLabel(e) {\n    const label = document.getElementById(e.target.name)\n    if (e.target.value === '') {\n      label.classList.toggle('focussedLabel')\n    }\n  }\n\n  return(\n    <div className='signup-container'>\n\n    <div className='welcome-banner'>\n      <h1>\n        New to Lister?\n      </h1>\n      <h2>\n        Signup to Lister for free and keep your lists synced, on all your devices, all the time.\n      </h2>\n    </div>\n\n    <div className='form-area'>\n      <form onSubmit={handleSubmit} name='signup' className='signup-form' autoComplete='off'>\n        <div id='form-container'>\n          <div className='input-container'>\n            <label htmlFor='username' id='username'>\n              Username\n            </label>\n            <input\n              type='text'\n              name='username'\n              onFocus={moveLabel}\n              onBlur={moveLabel}\n              onChange={clearErrorDisplay}/>\n          </div>\n\n          <div className='input-container'>\n            <label htmlFor='password' id='password'>\n              Password\n            </label>\n            <input\n              type='password'\n              name='password'\n              onFocus={moveLabel}\n              onBlur={moveLabel}\n              onChange={clearErrorDisplay}/>\n          </div>\n\n          <div className='input-container'>\n            <label htmlFor='passwordConfirmation' id='passwordConfirmation'>\n              Confirm password\n            </label>\n            <input\n              type='password'\n              name='passwordConfirmation'\n              onFocus={moveLabel}\n              onBlur={moveLabel}\n              onChange={clearErrorDisplay}/>\n          </div>\n          <div id='error-box'>Error</div>\n\n          <button name='submit-button' id='submit-button' hidden></button>\n        </div>\n      </form>\n\n      <label id='submit-proxy' htmlFor='submit-button' className='submit-proxy-button'>\n        {submitText}\n      </label>\n    </div>\n  </div>\n  )\n}\n\nexport default Signup\n","import React , { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport './scss/Login.scss'\n\nfunction Login({ setUser }) {\n  const history = useHistory()\n\n  const [ submitText, modifySubmitText ] = useState('Login')\n\n// Handle form submission\n  function handleSubmit(e) {\n    e.preventDefault()\n    const form = e.target\n    const data = new FormData(form)\n    fetch( process.env.REACT_APP_BACKEND_URL + 'login', {\n     method: 'POST',\n     body: data,\n     credentials: 'include'\n    })\n    .then( res => res.json() )\n    .then( data => {\n      if (data === false ) {\n        displayFormErrorMessage()\n        displayErrorBox()\n      }\n      else {\n        window.localStorage.setItem('listerToken', data.token.toString() )\n        setUser(data.username)\n        history.push('/')\n      }\n    })\n  }\n\n// Form error visualisation\n  // Modify login button to display that there is a problem with the login\n  function displayFormErrorMessage() {\n    modifySubmitText('Problem logging in!')\n    document.getElementById('submit-proxy').classList.add('error-styling')\n  }\n  // Revert login button back to normal\n  function removeFormErrorMessage() {\n    modifySubmitText('Login')\n    document.getElementById('submit-proxy').classList.remove('error-styling')\n  }\n  // Display error box in form\n  function displayErrorBox() {\n    document.getElementById('form-container').classList.add('shrink-width')\n    const errorBox = document.getElementById('error-box')\n    let errorItem = document.createElement('div')\n    errorItem.textContent = 'Problem with username or password, try retyping and logging in again.'\n    errorBox.appendChild(errorItem)\n    errorBox.classList.add('visible')\n  }\n  // Remove error box in form\n  function removeErrorBox() {\n    document.getElementById('form-container').classList.remove('shrink-width')\n    const errorBox = document.getElementById('error-box')\n    errorBox.classList.remove('visible')\n    errorBox.textContent = ''\n  }\n  // Clear error messages when any of the form input values change\n  function clearErrorDisplay() {\n    removeErrorBox()\n    removeFormErrorMessage()\n  }\n\n\n// Moves fake placeholder text on inputs move and stay at the new position as long as the input isn't empty\n  function moveLabel(e) {\n    const label = document.getElementById(e.target.name)\n    if (e.target.value === '') {\n      label.classList.toggle('focussedLabel')\n    }\n  }\n\n\n\n  return(\n    <div className='login-container'>\n\n      <div className='welcome-banner'>\n        <h1>\n          Welcome back!\n        </h1>\n        <h2>\n          Login and keep your lists synced across all your devices.\n        </h2>\n      </div>\n\n      <div className='form-area'>\n        <form onSubmit={handleSubmit} name='login' className='login-form'>\n          <div id='form-container'>\n            <div className='input-container'>\n              <label htmlFor='username' id='username'>\n                Username\n              </label>\n              <input\n                type='text'\n                name='username'\n                onFocus={moveLabel}\n                onBlur={moveLabel}\n                onChange={clearErrorDisplay}/>\n            </div>\n\n            <div className='input-container'>\n              <label htmlFor='password' id='password'>\n                Password\n              </label>\n              <input\n                type='password'\n                name='password'\n                onFocus={moveLabel}\n                onBlur={moveLabel}\n                onChange={clearErrorDisplay}/>\n            </div>\n            <div id='error-box'>Error</div>\n\n            <button name='submit-button' id='submit-button' hidden></button>\n          </div>\n        </form>\n\n        <label id='submit-proxy' htmlFor='submit-button' className='submit-proxy-button'>\n          {submitText}\n        </label>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","import React from \"react\"\nimport classNames from \"classnames\"\n\nconst classes = classNames({ // Apply multiple classes to the element\n      \"remove-todo\": true,\n      \"float-right\": true\n    })\n\nconst TodoItem = ({ id, task, completed, toggleCompleted, removeTodo }) => (\n  <div className=\"todo-item\">\n    <input\n      type=\"checkbox\"\n      value={completed}\n      checked={completed}\n      onChange={() => toggleCompleted(id)}/>\n\n    <span className={completed ? \"completed-todo\" : null}> {/*Toggle styling if todo is completed*/}\n      {task}\n    </span>\n\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={() => removeTodo(id)}>\n      Remove\n    </button>\n\n  </div>\n)\n\nexport default TodoItem\n","import React from \"react\"\nimport TodoItem from \"./TodoItem\"\n\nconst TodoList = ({ todos, toggleCompleted, removeTodo }) => {\n  return(\n    <div className=\"todo-container\">\n      {\n        todos.map(todo => {\n          return(\n            <TodoItem\n              key={todo.id}\n              toggleCompleted={toggleCompleted}\n              removeTodo={removeTodo}\n              id={todo.id}\n              task={todo.task}\n              completed={todo.completed}/>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default TodoList\n","import React, { useState } from 'react'\n\nimport add from '../assets/add.svg'\n\nconst NewTodoForm = ({ submitNewTodo }) => {\n  let [ task, updateTask ] = useState('')\n\n  const handleInputChange = (e) => {\n    updateTask(\n      e.target.value\n    )\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()    // Prevent form submission\n    submitNewTodo(task)   // Submit todo\n    updateTask('')        // Clear textbox\n  }\n\n  return(\n    <div className='new-todo-form'>\n      <form onSubmit={(e) => handleSubmit(e)} autoComplete='off'>\n        <label>\n          <input\n            name='task'\n            value={task}\n            placeholder='E.g. Water the plants'\n            onChange={handleInputChange}\n            type='text'>\n          </input>\n        </label>\n\n        <button type='submit'>\n          <img src={add} alt='plus symbol icon'/>\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewTodoForm\n","import React, { useState, useEffect } from 'react'\n\nimport TodoList from './components/TodoList'\nimport NewTodoForm from './components/NewTodoForm'\n\nimport './scss/Todos.scss'\n\n\n// Default single todo to display to unregsitered or brand new users\nconst defaultTodos = [{\n  id: 0,\n  task: 'Write first todo (or list item!)',\n  completed: false\n}]\n\nfunction Todos({ user }) {\n\n  const [ todos, modifyTodos ] = useState(defaultTodos)\n\n// Load user's todos\n  useEffect(() => {\n    \n    /* If a login token is set then try and use it to GET the users stored todos */\n    if ( localStorage.getItem('listerToken') ) {\n      fetch( process.env.REACT_APP_BACKEND_URL + 'todos', {\n        method: 'GET',\n        headers: {\n         'Authorization' : `Bearer ${localStorage.getItem('listerToken')}`\n        }\n      })\n      .then( res => res.json() )\n      .then( todos => {\n        if ( Array.isArray(todos) && ( (todos[0]&&todos[0].id!==0) || todos[1]) )  { // Use database todos unless problem with array\n          modifyTodos(todos)\n        }\n      })\n      .catch( error  => {\n        console.log(error)\n      })\n    }\n\n    /* If user does not seem to be logged in locally then default back to the defaultTodos */\n    else {\n      modifyTodos( [...defaultTodos] )\n    }\n  }, [user])\n\n\n// Update users todo storage when modified\n  useEffect(() => {\n    // If a login token is set then try and use it to PUT the updated todos to the database\n    if ( localStorage.getItem('listerToken') ) {\n      fetch( process.env.REACT_APP_BACKEND_URL + 'todos', {\n        method: 'PUT',\n        body: JSON.stringify({todos}),\n        headers: {\n          'Authorization' : `Bearer ${localStorage.getItem('listerToken')}`,\n          'Content-Type': 'application/json'\n        }\n      })\n      .catch( error => {\n        console.log(error)\n      })\n    }\n  }, [todos])\n\n\n// Add new todo to list\n  const submitNewTodo = (newTask) => {\n    let d = new Date()\n    let timeBasedID = d.getTime() // Generates a unique-to-user ID based on the time the todo is submitted\n    let newTodo = {\n      id: timeBasedID,\n      task: newTask,\n      completed: false\n    }\n    modifyTodos(oldTodos => [...oldTodos, newTodo]) // Add todo onto end of existing todo array\n  }\n\n\n// Delete todo\n  const removeTodo = (id) => {\n    modifyTodos(\n      todos.filter(todo => todo.id !== id) // FIlter out the id in question and make that the new existing todo array\n    )\n  }\n\n\n// Toggle a todo's completion status\n  const toggleCompleted = (id) => {\n    let updatedTodos = todos.map(todo => { // Linear search for the right todo item in existing todo array\n      if (todo.id === id) {\n        todo.completed = !todo.completed // Boolean flip of todo property on todo that matches the todo id that was clicked\n      }\n      return todo\n    })\n    modifyTodos(\n      updatedTodos\n    )\n  }\n///////////////////////////////////////////////////////////////// Presentational\n  return(\n    <div>\n      <TodoList\n        todos={todos}\n        toggleCompleted={toggleCompleted}\n        removeTodo={removeTodo}/>\n      <NewTodoForm\n        submitNewTodo={submitNewTodo}/>\n    </div>\n  )\n}\n\nexport default Todos\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport '../scss/Navbar.scss'\n\nfunction toggleMenu(e) {\n  const menu = document.getElementById('main-nav')\n  menu.classList.toggle('nav-popout')\n}\n\nfunction NavbarLoggedIn({ user, setUser }) {\n  // Log current user out\n  function logout() {\n    fetch( process.env.REACT_APP_BACKEND_URL + 'logout', {\n      credentials: 'include'\n    })\n    .then( setUser(null) )\n    .then( window.localStorage.removeItem('listerToken') )\n  }\n  return (\n    <nav id='main-nav'>\n      <div className='nav-user'>\n        {user}\n      </div>\n      <div className='nav-button' onClick={logout}>\n        Logout\n      </div>\n    </nav>\n  )\n}\n\nfunction NavbarLoggedOut() {\n  return (\n    <nav id='main-nav'>\n      <NavLink\n        to='/login' exact\n        activeClassName='activeLink'\n        className='nav-button'\n        onClick={toggleMenu}>\n          Login\n      </NavLink>\n\n      <NavLink\n        to='/signup' exact\n        activeClassName='activeLink'\n        className='nav-button'\n        onClick={toggleMenu}>\n          Signup\n      </NavLink>\n\n      <NavLink\n        to='/' exact\n        activeClassName='activeLink'\n        className='nav-button'\n        onClick={toggleMenu}>\n          Todos\n      </NavLink>\n    </nav>\n  )\n}\n\nexport { NavbarLoggedIn, NavbarLoggedOut }\n","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter, NavLink, Route } from 'react-router-dom'\n\nimport Signup from './Signup'\nimport Login from './Login'\nimport Todos from './Todos'\nimport { NavbarLoggedIn, NavbarLoggedOut } from './components/Navbar'\n\nimport \"./scss/App.scss\"\nimport hamburger from './assets/hamburger.svg'\n\nfunction App() {\n  // App's local record if a user appears logged in or not, passed to Navbar\n  const [ user, setUser ] = useState(null)\n\n  // Check if a user token is in localStorage, if so then try and use it to login\n  // If token login fails then\n  useEffect(() => {\n    if ( (user === null) && localStorage.getItem('listerToken') ) {\n      fetch( process.env.REACT_APP_BACKEND_URL + 'token-login', {\n       method: 'POST',\n       headers: {\n        'Authorization' : `Bearer ${localStorage.getItem('listerToken')}`\n       }\n      })\n      .then( res => res.json() )\n      .then( username => {\n        setUser(username)\n      })\n      .catch( console.log('Error logging in with JWT') )\n    }\n  }, [user])\n\n  // Toggles dropdown menu visibility change on mobile site\n  function toggleMenu(e) {\n    const menu = document.getElementById('main-nav')\n    menu.classList.toggle('nav-popout')\n  }\n\n  // Gets the username of the user to display in the header bar\n  function getUsername() {\n    if (user !== null) {\n      return user.username\n    }\n  }\n\n  return(\n    <BrowserRouter>\n        <header className='main-header'>\n\n          <div className='mobile-username'>\n            {getUsername()}\n          </div>\n\n          <NavLink\n            to='/' exact\n            activeClassName='activeLink'\n            className='logo'>\n              Lister\n          </NavLink>\n\n          <div\n            className='hamburger-icon'\n            onClick={toggleMenu}>\n            <img src={hamburger} alt='Hamburger menu icon for navigation menu'/>\n          </div>\n\n          {/*Change navbar options depending on if the user is logged in or not*/}\n          { user ?\n            <NavbarLoggedIn user={user} setUser={setUser}/>\n            :\n            <NavbarLoggedOut/>\n          }\n        </header>\n\n        <main>\n          <Route\n            exact path='/signup'\n            component={Signup} />\n\n          <Route\n            exact path='/login'\n            render={(props) => (\n              <Login {...props} isAuthed={true}\n                setUser={setUser}/>\n            )} />\n\n          <Route\n            exact path='/'\n            render={(props) => (\n              <Todos {...props} isAuthed={true}\n                user={user}/>\n            )} />\n        </main>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}